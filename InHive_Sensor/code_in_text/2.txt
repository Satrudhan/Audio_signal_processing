#include "mock_signal.h"
#include <Arduino.h>
#include <arduinoFFT.h>  // FFT Library
#include <vector>

#define SIGNAL_SIZE (sizeof(mock_signal) / sizeof(mock_signal[0]))  // Get array size
#define SAMPLE_RATE 8000  // Adjust based on actual sampling rate (Hz)
#define TARGET_FREQUENCY 400  // Expected frequency
#define THRESHOLD_DB 10  // dB threshold for anomaly detection

arduinoFFT FFT = arduinoFFT();
float processed_signal[SIGNAL_SIZE];
double vReal[SIGNAL_SIZE];
double vImag[SIGNAL_SIZE];

// Low-pass filter (Simple IIR implementation)
float lowPassFilter(float input, float prev_output, float alpha) {
    return alpha * input + (1 - alpha) * prev_output;
}

// Normalize function
void normalizeSignal(float* signal, size_t size) {
    uint16_t max_val = 65535;
    uint16_t min_val = 0;
    
    for (size_t i = 0; i < size; i++) {
        signal[i] = 2.0 * ((signal[i] - min_val) / (float)(max_val - min_val)) - 1.0;
    }
}

// Moving average function
void movingAverageFilter(float* signal, size_t size, int window_size) {
    float temp[size];
    for (size_t i = 0; i < size; i++) {
        temp[i] = signal[i];
    }

    for (size_t i = 0; i < size; i++) {
        float sum = 0;
        int count = 0;
        for (int j = -window_size / 2; j <= window_size / 2; j++) {
            if (i + j >= 0 && i + j < size) {
                sum += temp[i + j];
                count++;
            }
        }
        signal[i] = sum / count;
    }
}

// Perform FFT & Detect Anomalies
void performFFT() {
    // Copy processed signal to FFT input arrays
    for (size_t i = 0; i < SIGNAL_SIZE; i++) {
        vReal[i] = processed_signal[i];
        vImag[i] = 0;  // Imaginary part is 0 for real signals
    }

    FFT.Windowing(vReal, SIGNAL_SIZE, FFT_WIN_HAMMING, FFT_FORWARD); // Apply Hamming window
    FFT.Compute(vReal, vImag, SIGNAL_SIZE, FFT_FORWARD);
    FFT.ComplexToMagnitude(vReal, vImag, SIGNAL_SIZE);

    double maxMagnitude = 0;
    double dominantFrequency = 0;

    // Find peak frequency
    for (size_t i = 1; i < SIGNAL_SIZE / 2; i++) {
        double magnitude = vReal[i];
        double frequency = i * ((double)SAMPLE_RATE / SIGNAL_SIZE);

        if (magnitude > maxMagnitude) {
            maxMagnitude = magnitude;
            dominantFrequency = frequency;
        }
    }

    // Convert magnitude to decibels (approximate)
    double magnitudeDB = 20 * log10(maxMagnitude);

    Serial.print("Dominant Frequency: ");
    Serial.print(dominantFrequency, 2);
    Serial.print(" Hz, Magnitude: ");
    Serial.print(magnitudeDB, 2);
    Serial.println(" dB");

    // Anomaly detection
    if (abs(dominantFrequency - TARGET_FREQUENCY) > 50 || magnitudeDB > THRESHOLD_DB) {
        Serial.println("⚠️ Anomaly Detected!");
    }
}

// Placeholder for MFCC calculation (optional)
void computeMFCC() {
    // MFCCs require a Mel filter bank & DCT, which are complex for microcontrollers.
    // Implementing MFCCs fully would require an external library like TensorFlow Lite or Edge Impulse.
    Serial.println("MFCC computation not implemented. Consider using Edge Impulse for classification.");
}

void setup() {
    Serial.begin(115200);
    delay(1000);
    Serial.println("Processing Mock Signal...");

    // Convert uint16_t array to float for processing
    for (size_t i = 0; i < SIGNAL_SIZE; i++) {
        processed_signal[i] = (float)mock_signal[i];
    }

    // Apply Low-Pass Filter
    float alpha = 0.1;
    float prev_output = processed_signal[0];
    for (size_t i = 1; i < SIGNAL_SIZE; i++) {
        processed_signal[i] = lowPassFilter(processed_signal[i], prev_output, alpha);
        prev_output = processed_signal[i];
    }

    // Normalize the signal
    normalizeSignal(processed_signal, SIGNAL_SIZE);

    // Apply Moving Average Filter
    int window_size = 5;
    movingAverageFilter(processed_signal, SIGNAL_SIZE, window_size);

    Serial.println("Running FFT...");
    performFFT();
}

void loop() {
    // Optional: If real-time processing is needed, call performFFT() periodically
    delay(5000);  // Wait before re-processing
}
